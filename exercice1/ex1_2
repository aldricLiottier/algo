import numpy
import math

def find_closest(centerp : float, leftp:float, rightp:float) -> bool:
    temp = min((leftp, rightp), key=lambda x: abs(centerp-x))
    if temp == rightp:
        return True
    else:
        return False

def checktenleft(centerv:float, leftp:list, rightp:list) -> int:
    leftc = leftp.copy()
    centerc = leftc.pop(0)
    rightc = rightp.copy()
    count1 = math.fabs((centerc) - (centerv))
    for i in range(1000):
        if len(leftc) != 0 and len(rightc) != 0:
            if find_closest(centerc, leftc[0], rightc[0]):
                centerv = rightc.pop(0)
                count1 += math.fabs((centerc) - (centerv))
                centerc = centerv
            else:
                centerv = leftc.pop(0)
                count1 += math.fabs((centerc) - (centerv))
                centerc = centerv

    return count1

def checktenright(centerv:float, leftp:list, rightp:list) -> int:
    leftc = leftp.copy()
    rightc = rightp.copy()
    centerc = rightc.pop(0)
    count1 = math.fabs((centerc) - (centerv))
    for i in  range(1000):
        if len(leftc) != 0 and len(rightc) != 0:
            if find_closest(centerc, leftc[0], rightc[0]):
                centerv = rightc.pop(0)
                count1 +=  math.fabs((centerc) - (centerv))
                centerc = centerv
            else:
                centerv = leftc.pop(0)
                count1 += math.fabs((centerc) - (centerv))
                centerc = centerv

    return count1

def greedy_house_cleaner(house :list):
    before_0 = list()
    after_0 = list()
    for x in house:
        if x < 0:
            before_0.append(x)
        else: 
            after_0.append(x)
    before_0 =  sorted(before_0, key = float)
    before_0.reverse()
    after_0 =  sorted(after_0, key = float)
    house =  sorted(house, key = float)
    x = 0
    center = 0
    time = 0
    res = list()
    while len(before_0) != 0 and len(after_0) != 0:
        count1 = find_closest(x, before_0[0], after_0[0])
        if count1:
            center = after_0.pop(0)
            res.append(center)
            time +=   math.fabs((center) - (x))
            x = center
        else:
            center = before_0.pop(0)
            time +=   math.fabs((center) - (x))
            x = center
    print(time)
    res += after_0 +before_0
    print(res)

def house_cleaner(house :list):
    before_0 = list()
    after_0 = list()
    for x in house:
        if x < 0:
            before_0.append(x)
        else: 
            after_0.append(x)
    before_0 =  sorted(before_0, key = float)
    before_0.reverse()
    after_0 =  sorted(after_0, key = float)
    house =  sorted(house, key = float)
    x = 0
    center = 0
    time = 0
    res = list()
    while len(before_0) != 0 and len(after_0) != 0:
        count1 = checktenleft(x, before_0, after_0)
        count2 = checktenright(x, before_0, after_0)
        if count1 > count2:
            center = after_0.pop(0)
            res.append(center)
            time +=   math.fabs((center) - (x))
            x = center
        else:
            center = before_0.pop(0)
            time +=   math.fabs((center) - (x))
            x = center
    #print(time)
    res += after_0 +before_0
    print(res)

house = numpy.random.normal(0,1000,100).tolist()

#greedy_house_cleaner(house)

#house_cleaner (house)

def parcours(list :list):
    house_cleaner (list)